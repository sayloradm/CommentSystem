import { jsx } from '@theme-ui/core';
import { css, get } from '@theme-ui/css';
import { useEffect, createElement } from 'react';
import styled from '@emotion/styled';
import { useMDXComponents, MDXProvider as MDXProvider$1 } from '@mdx-js/react';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

// mdx components
var tags = ['p', 'b', 'i', 'a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'img', 'pre', 'code', 'ol', 'ul', 'li', 'blockquote', 'hr', 'em', 'table', 'tr', 'th', 'td', 'em', 'strong', 'del', // mdx
'inlineCode', 'thematicBreak', // other
'div', // theme-ui
'root'];
var aliases = {
  inlineCode: 'code',
  thematicBreak: 'hr',
  root: 'div'
};

var isAlias = function isAlias(x) {
  return x in aliases;
};

var alias = function alias(n) {
  return isAlias(n) ? aliases[n] : n;
};

var propOverrides = {
  th: {
    align: 'textAlign'
  },
  td: {
    align: 'textAlign'
  }
};
var themed = function themed(key) {
  return function (_ref) {
    var theme = _ref.theme,
        rest = _objectWithoutProperties(_ref, ["theme"]);

    var propsStyle = propOverrides[key];
    var extraStyles = propsStyle ? Object.keys(rest).filter(function (prop) {
      return propsStyle[prop] !== undefined;
    }).reduce(function (acc, prop) {
      return _objectSpread2(_objectSpread2({}, acc), {}, _defineProperty({}, propsStyle[prop], rest[prop]));
    }, {}) : undefined;
    return css(_objectSpread2(_objectSpread2({}, get(theme, "styles.".concat(key))), extraStyles))(theme);
  };
}; // opt out of typechecking whenever `as` prop is used

var Themed = styled('div')(themed('div'));
/**
 * @deprecated since 0.6.0.
 *
 * `Styled` was renamed to `Themed` to avoid confusion with styled components.
 */

var Styled = styled('div')(themed('div'));

var warnStyled = function warnStyled(tag) {
  return function (props) {
    useEffect(function () {
      if (process.env.NODE_ENV !== 'production') {
        console.warn('[theme-ui] The Styled component from "@theme-ui/mdx" is deprecated and will be removed in a future version. It has been renamed to Themed with the same API.');
      }
    }, []);
    return /*#__PURE__*/createElement(alias(tag), props);
  };
};

var components = {};
tags.forEach(function (tag) {
  // fixme?
  components[tag] = styled(alias(tag))(themed(tag));
  Themed[tag] = components[tag];
  Styled[tag] = styled(warnStyled(tag))(themed(tag));
});

var createComponents = function createComponents(comps) {
  var next = _objectSpread2({}, components);

  var componentKeys = Object.keys(comps);
  componentKeys.forEach(function (key) {
    next[key] = styled(comps[key])(themed(key));
  });
  return next;
};

var MDXProvider = function MDXProvider(_ref2) {
  var components = _ref2.components,
      children = _ref2.children;
  var outer = useMDXComponents();
  return jsx(MDXProvider$1, {
    components: createComponents(_objectSpread2(_objectSpread2({}, outer), components)),
    children: children
  });
};

export { MDXProvider, Styled, Themed, components, themed };
