import React, { useMemo, useState, useEffect } from 'react';
import { useThemeUI, jsx, __ThemeUIInternalBaseThemeProvider } from '@theme-ui/core';
import { css, get } from '@theme-ui/css';
import { Global } from '@emotion/react';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

var toVarName = function toVarName(key) {
  return "--theme-ui-".concat(key.replace('-__default', ''));
};

var toVarValue = function toVarValue(key) {
  return "var(".concat(toVarName(key), ")");
};

var join = function join() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.filter(Boolean).join('-');
};
var reservedKeys = {
  useCustomProperties: true,
  initialColorModeName: true,
  printColorModeName: true,
  initialColorMode: true,
  useLocalStorage: true
};


var toCustomProperties = function toCustomProperties(obj, parent, themeKey) {
  var next = Array.isArray(obj) ? [] : {};

  for (var key in obj) {
    var value = obj[key];
    var name = join(parent, key);

    if (value && _typeof(value) === 'object') {
      next[key] = toCustomProperties(value, name);
      continue;
    }

    if (reservedKeys[key]) {
      next[key] = value;
      continue;
    }
    next[key] = toVarValue(name);
  }

  return next;
};
var objectToVars = function objectToVars(parent, obj) {
  var vars = {};

  for (var key in obj) {
    if (key === 'modes') continue;
    var name = join(parent, key);
    var value = obj[key];

    if (value && _typeof(value) === 'object') {
      vars = _objectSpread2(_objectSpread2({}, vars), objectToVars(name, value));
    } else {
      vars[toVarName(name)] = value;
    }
  }

  return vars;
}; // create root styles for color modes

var createColorStyles = function createColorStyles() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref = theme.config || theme || {},
      useCustomProperties = _ref.useCustomProperties,
      initialColorModeName = _ref.initialColorModeName,
      printColorModeName = _ref.printColorModeName,
      useRootStyles = _ref.useRootStyles;

  var colors = theme.rawColors || theme.colors;
  if (!colors || useRootStyles === false) return {};

  if (useCustomProperties === false) {
    return css({
      html: {
        color: 'text',
        bg: 'background'
      }
    })(theme);
  }

  var modes = colors.modes || {};
  var styles = objectToVars('colors', colors);
  Object.keys(modes).forEach(function (mode) {
    var key = "&.theme-ui-".concat(mode);
    styles[key] = objectToVars('colors', modes[mode]);
  });

  if (printColorModeName) {
    var mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];
    styles['@media print'] = objectToVars('colors', mode);
  }

  var colorToVarValue = function colorToVarValue(color) {
    return toVarValue("colors-".concat(color));
  };

  return css({
    html: _objectSpread2(_objectSpread2({}, styles), {}, {
      color: colorToVarValue('text'),
      bg: colorToVarValue('background')
    })
  })(theme);
};

var STORAGE_KEY = 'theme-ui-color-mode';
var storage = {
  get: function get() {
    try {
      return window.localStorage.getItem(STORAGE_KEY);
    } catch (e) {
      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);
    }
  },
  set: function set(value) {
    try {
      window.localStorage.setItem(STORAGE_KEY, value);
    } catch (e) {
      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);
    }
  }
};

var getPreferredColorScheme = function getPreferredColorScheme() {
  if (typeof window !== 'undefined' && window.matchMedia) {
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }

    if (window.matchMedia('(prefers-color-scheme: light)').matches) {
      return 'light';
    }
  }

  return null;
};

var getModeFromClass = function getModeFromClass() {
  var mode;

  if (typeof document !== 'undefined') {
    document.documentElement.classList.forEach(function (className) {
      if (className.startsWith('theme-ui-')) {
        mode = className.replace('theme-ui-', '');
      }
    });
  }

  return mode;
};

var useColorModeState = function useColorModeState() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref = theme.config || theme,
      initialColorModeName = _ref.initialColorModeName,
      useColorSchemeMediaQuery = _ref.useColorSchemeMediaQuery,
      useLocalStorage = _ref.useLocalStorage;

  var _useState = useState(function () {
    var modeFromClass = getModeFromClass();

    if (modeFromClass) {
      return modeFromClass;
    }

    var preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();
    return preferredMode || initialColorModeName;
  }),
      _useState2 = _slicedToArray(_useState, 2),
      mode = _useState2[0],
      setMode = _useState2[1]; // on first render, we read the color mode from localStorage and
  // clear the class on document element body


  useEffect(function () {
    var stored = useLocalStorage !== false && storage.get();

    if (typeof document !== 'undefined') {
      document.documentElement.classList.remove('theme-ui-' + stored);
      document.body.classList.remove('theme-ui-' + stored);
    }

    if (stored && stored !== mode) {
      // eslint-disable-next-line react-hooks/exhaustive-deps
      mode = stored;
      setMode(stored);
    }
  }, []); // when mode changes, we save it to localStorage

  React.useEffect(function () {
    if (mode && useLocalStorage !== false) {
      storage.set(mode);
    }
  }, [mode, useLocalStorage]);

  if (process.env.NODE_ENV !== 'production') {
    var _theme$colors;

    if ((_theme$colors = theme.colors) !== null && _theme$colors !== void 0 && _theme$colors.modes && initialColorModeName && Object.keys(theme.colors.modes).indexOf(initialColorModeName) > -1) {
      console.warn('[theme-ui] The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');
    }
  }

  return [mode, setMode];
};

function useColorMode() {
  var _useThemeUI = useThemeUI(),
      colorMode = _useThemeUI.colorMode,
      setColorMode = _useThemeUI.setColorMode;

  if (typeof setColorMode !== 'function') {
    throw new Error("[useColorMode] requires the ColorModeProvider component");
  } // We're allowing the user to specify a narrower type for its color mode name.


  return [colorMode, setColorMode];
}

var omitModes = function omitModes(colors) {
  var res = _objectSpread2({}, colors);

  delete res.modes;
  return res;
};

function copyRawColors(colors, outerThemeRawColors) {
  for (var _i = 0, _Object$entries = Object.entries(colors); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    if (typeof value === 'string' && !value.startsWith('var(')) {
      outerThemeRawColors[key] = value;
    }

    if (_typeof(value) === 'object') {
      outerThemeRawColors[key] = _objectSpread2(_objectSpread2({}, outerThemeRawColors[key]), copyRawColors(value, {}));
    }
  }

  return outerThemeRawColors;
}

var ColorModeProvider = function ColorModeProvider(_ref2) {
  var children = _ref2.children;
  var outer = useThemeUI();
  var outerTheme = outer.theme;

  var _useColorModeState = useColorModeState(outerTheme),
      _useColorModeState2 = _slicedToArray(_useColorModeState, 2),
      colorMode = _useColorModeState2[0],
      setColorMode = _useColorModeState2[1];

  var theme = useMemo(function () {
    var res = _objectSpread2({}, outerTheme);

    var modes = get(res, 'colors.modes', {});
    var currentColorMode = get(modes, colorMode, {});

    if (colorMode) {
      res.colors = _objectSpread2(_objectSpread2({}, res.colors), currentColorMode);
    }

    var _ref3 = outerTheme.config || outerTheme,
        useCustomProperties = _ref3.useCustomProperties,
        _ref3$initialColorMod = _ref3.initialColorModeName,
        initialColorModeName = _ref3$initialColorMod === void 0 ? '__default' : _ref3$initialColorMod;

    var outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};

    if (useCustomProperties !== false) {
      var alreadyHasRawColors = res.rawColors != null;
      var colors = res.colors || {};

      if (alreadyHasRawColors) {
        outerThemeRawColors = _objectSpread2({}, outerThemeRawColors);
        copyRawColors(colors, outerThemeRawColors);

        if ('modes' in outerThemeRawColors) {
          var _res$rawColors;

          res.rawColors = _objectSpread2(_objectSpread2({}, outerThemeRawColors), {}, {
            modes: _objectSpread2(_objectSpread2({}, (_res$rawColors = res.rawColors) === null || _res$rawColors === void 0 ? void 0 : _res$rawColors.modes), {}, _defineProperty({}, initialColorModeName, omitModes(outerThemeRawColors)))
          });
        } else {
          res.rawColors = outerThemeRawColors;
        }
      } else {
        if (!('modes' in outerThemeRawColors)) {
          res.rawColors = colors;
        } else {
          var _modes = _objectSpread2(_defineProperty({}, initialColorModeName, omitModes(outerThemeRawColors)), outerThemeRawColors.modes);

          res.rawColors = _objectSpread2(_objectSpread2({}, colors), {}, {
            modes: _modes
          });
          /* modes doesn't match index signature by design */
        }
      }

      res.colors = toCustomProperties(omitModes(outerThemeRawColors), 'colors');
    }

    return res;
  }, [colorMode, outerTheme]);

  var context = _objectSpread2(_objectSpread2({}, outer), {}, {
    theme: theme,
    colorMode: colorMode,
    setColorMode: setColorMode
  });

  var isTopLevelColorModeProvider = outer.setColorMode === undefined;
  return jsx(__ThemeUIInternalBaseThemeProvider, {
    context: context
  }, isTopLevelColorModeProvider ? jsx(Global, {
    styles: function styles() {
      return createColorStyles(theme);
    }
  }) : jsx('div', {
    className: 'theme-ui__nested-color-mode-provider',
    style: createColorStyles(theme)['html']
  }), children);
};
var noflash = "(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n  document.body.classList.add('theme-ui-' + mode);\n} catch (e) {} })();";
var InitializeColorMode = function InitializeColorMode() {
  return jsx('script', {
    key: 'theme-ui-no-flash',
    dangerouslySetInnerHTML: {
      __html: noflash
    }
  });
};

export { ColorModeProvider, InitializeColorMode, useColorMode };
